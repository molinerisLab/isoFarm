import os
import re

configfile: "config.yaml"

if os.path.exists("Snakefile_versioned.sk"):
    include: "Snakefile_versioned.sk"



#################
#
#  Global Params
#

REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT + "/bioinfotree/task"

GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"/gencode/dataset/"+config["SPECIES"]+"/"+config["GENCODE"]["VERSION"]
GENCODE_GENOME_FASTA=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.genome.fa"

SALMON_INDEX_DIR=BIOINFO_REFERENCE_ROOT+"/ensembl/dataset/"+config["ENSEMBL"]["RELEASE"]

STAR_GENOME_DIR=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.star_index/"+config["STAR"]["VERSION"]

PATH_DEXSEQ="/sto1/ref/miniconda2/envs/isoFarm_Env/lib/R/library/DEXSeq/python_scripts"

FASTQ, = glob_wildcards(config["PATH_FASTQ"]+"/{fastq_x}.fastq.gz")
SAMPLES = [re.sub("_R\\d_001","",x) for x in FASTQ]



###############
#
#  ALL targets
#

rule all:
	input:
		"multi_SalmonQuant.gz"



######################################
#
#  Isoform Quantification with SALMON	
#

ruleorder: salmon_pe > salmon_se

rule salmon_pe:
	input:
		fastq1=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		fastq2=config["PATH_FASTQ"]+"/{sample}_R2_001.fastq.gz",
		salmon_index=SALMON_INDEX_DIR+"/"+config["SPECIES"]+"_salmon_index"
	output:
		"Salmon/{sample}/quant.sf"
	params:
		library_type=config["SALMON"]["LIBRARY_TYPE"],
		cores=config["CORES"]
	shell:"""
		salmon quant \
			-i {input.salmon_index} \
			-l {params.library_type} \
			-1 {input.fastq1} -2 {input.fastq2} \
			--validateMappings \
			-o `dirname {output}` \
			-p {params.cores}
	"""

rule salmon_se:
	input:
		fastq=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		salmon_index=SALMON_INDEX_DIR+"/"+config["SPECIES"]+"_salmon_index"
	output:
		"Salmon/{sample}/quant.sf"
	params:
		library_type=config["SALMON"]["LIBRARY_TYPE"],
		cores=config["CORES"]
	shell: """
		salmon quant \
			-i {input.salmon_index} \
			-l {params.library_type} \
			-r {input.fastq} \
			--validateMappings \
			-o `dirname {output}` \
			-p {params.cores}
	"""

rule multi_SalmonQuant:
	input:
		expand("Salmon/{sample}/quant.sf", sample=SAMPLES)
	output:
		"multi_SalmonQuant.gz"
	shell:
		"matrix_reduce -t 'Salmon/*/quant.sf' "
		"| bawk 'NR==1 || $2!=\"Name\" {{split($2,a,\".\"); print $1,a[1],$3~6}}' "
		"| bawk 'NR==1 {{$1=\"Sample\"}} 1' "
		"| gzip > {output}"


rule get_transcripts_from_gene:
	input:
		SALMON_INDEX_DIR+"/"+config["SPECIES"]+".cdna.all.fa.gz"
	output:
		"Salmon_plot/{gene_name}.transcripts.txt"
	shell:
		"mkdir -p `dirname {output}`; "
		"zgrep {wildcards.gene_name} {input} "
		"| awk '{{split($1,a,\".\"); print a[1]}}' "
		"| tr -d \">\" > {output}"

rule plot_SalmonQuant_transcripts:
	input:
		tpm_matrix="multi_SalmonQuant.gz",
		transcripts="Salmon_plot/{gene_name}.transcripts.txt"
	output:
		out="Salmon_plot/{gene_name}_transcripts.bar.pdf"
	script: 
		"../../local/src/plot-transcripts.R" 

# only when having a manually added alias file
rule plot_SalmonQuant_alias:
	input:
		tpm_matrix="multi_SalmonQuant.gz",
		alias="{gene_name}_alias.tsv"
	output:
		out="Salmon_plot/{gene_name}_alias.bar.pdf"
	script: 
		"../../local/src/plot-isoform_alias.R" 




