import os
import re

configfile: "config.yaml"

if os.path.exists("Snakefile_versioned.sk"):
    include: "Snakefile_versioned.sk"



#################
#
#  Global Params
#

REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT + "/bioinfotree/task"

EXTERNAL_REPO_DIR=config["EXTERNAL_REPO_DIR"]

GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"/gencode/dataset/"+config["SPECIES"]+"/"+config["GENCODE"]["VERSION"]
GENCODE_GENOME_FASTA=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.genome.fa"

STAR_GENOME_DIR=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.star_index/"+config["STAR"]["VERSION"]

PATH_DEXSEQ="/sto1/ref/miniconda2/envs/isoFarm_Env/lib/R/library/DEXSeq/python_scripts"

# CONDA ---
CONDA_ROOT="/opt/conda"
CONDA_VERSION="miniconda3"
CONDA_ACTIVATE="set +u; source "+ CONDA_ROOT + "/" + CONDA_VERSION + "/etc/profile.d/conda.sh; conda activate"


FASTQ, = glob_wildcards(config["PATH_FASTQ"]+"/{fastq_x}.fastq.gz")
SAMPLES = [re.sub("_R\\d_001","",x) for x in FASTQ]



###############
#
#  ALL targets
#

rule all_salmon:
	input:
		"multi_SalmonQuant.gz"

rule all_rsem:
	input:
		"rsem.isoforms.results.gene_symbol.gz"

rule all_ipafinder:
	input:
		expand("IPAFinder/{contrast}/IPAFinder_DUIPA.txt", contrast=config["CONTRASTS"])


######################################
#
#  Isoform Quantification with SALMON	
#

ruleorder: salmon_pe > salmon_se

rule salmon_pe:
	input:
		fastq1=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		fastq2=config["PATH_FASTQ"]+"/{sample}_R2_001.fastq.gz",
		salmon_index=config["PATH_ANNOT_DIR"]+"/"+config["SALMON"]["INDEX_DIR"]
	output:
		"Salmon/{sample}/quant.sf"
	params:
		library_type=config["SALMON"]["LIBRARY_TYPE"],
		cores=config["CORES"]
	shell:"""
		salmon quant \
			-i {input.salmon_index} \
			-l {params.library_type} \
			-1 {input.fastq1} -2 {input.fastq2} \
			--validateMappings \
			-o `dirname {output}` \
			-p {params.cores}
	"""

rule salmon_se:
	input:
		fastq=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		salmon_index=config["PATH_ANNOT_DIR"]+"/"+config["SALMON"]["INDEX_DIR"]
	output:
		"Salmon/{sample}/quant.sf"
	params:
		library_type=config["SALMON"]["LIBRARY_TYPE"],
		cores=config["CORES"]
	shell: """
		salmon quant \
			-i {input.salmon_index} \
			-l {params.library_type} \
			-r {input.fastq} \
			--validateMappings \
			-o `dirname {output}` \
			-p {params.cores}
	"""

rule multi_SalmonQuant:
	input:
		expand("Salmon/{sample}/quant.sf", sample=SAMPLES)
	output:
		"multi_SalmonQuant.gz"
	shell:
		"matrix_reduce -t 'Salmon/*/quant.sf' "
		"| grep -v EffectiveLength "
		"| bawk 'BEGIN{{print \"sample\",\"tx_id\",\"gene_id\",\"tx_ensembl_id\",\"gene_symbol\",\"tx_type\",\"length\",\"effective_length\",\"TPM\",\"nreads\"}} "
		"{{split($2,a,\"|\"); print $1,a[1],a[2],a[5],a[6],a[8],$3,$4,$5,$6}}' "
		"| gzip > {output}"

rule get_top_expressed_isoform:
    input:
        "multi_SalmonQuant.gz"
    output:
        "multi_SalmonQuant.top_expressed_isoform.gz"
    shell:
        "../../local/src/top_expressed_isoform.R {input} {output}"

rule get_top_expressed_isoform_gtf:
	input:
		top_iso="multi_SalmonQuant.top_expressed_isoform.gz",
		gtf="/home/reference_data/bioinfotree/task/gencode/dataset/hsapiens/32/primary_assembly.annotation.gtf"
	output:
		"multi_SalmonQuant.top_expressed_isoform.gtf"
	shell:
		"grep -Ff <(zcat {input.top_iso} | cut -f2)  {input.gtf} > {output}"


rule get_transcripts_from_gene:
	input:
		config["PATH_ANNOT_DIR"]+"/"+config["SALMON"]["INDEX_DIR"]+"/"+config["SPECIES"]+".cdna.all.fa.gz"
	output:
		"Salmon_plot/{gene_name}.transcripts.txt"
	shell:
		"mkdir -p `dirname {output}`; "
		"zgrep {wildcards.gene_name} {input} "
		"| awk '{{split($1,a,\".\"); print a[1]}}' "
		"| tr -d \">\" > {output}"

rule plot_SalmonQuant_transcripts:
	input:
		tpm_matrix="multi_SalmonQuant.gz",
		transcripts="Salmon_plot/{gene_name}.transcripts.txt"
	output:
		out="Salmon_plot/{gene_name}_transcripts.bar.pdf"
	script: 
		"../../local/src/plot-transcripts.R" 

# only when having a manually added alias file
rule plot_SalmonQuant_alias:
	input:
		tpm_matrix="multi_SalmonQuant.gz",
		alias="{gene_name}_alias.tsv"
	output:
		out="Salmon_plot/{gene_name}_alias.bar.pdf"
	script: 
		"../../local/src/plot-isoform_alias.R" 




######################################
#
#  Isoform Quantification with RSEM
#

ruleorder: STAR_transcr_pe > STAR_transcr_se

rule STAR_transcr_pe:
	input:
		fastq1=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		fastq2=config["PATH_FASTQ"]+"/{sample}_R2_001.fastq.gz"
	output:
		"STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_3; 
		mkdir -p `dirname {output}`;
		STAR \
			--genomeDir {STAR_GENOME_DIR} \
			--genomeLoad {config[STAR][SHARED_MEMORY]} \
			--runThreadN {config[CORES]} \
			--readFilesIn {input.fastq1} {input.fastq2} \
			--readFilesCommand zcat \
			--outFileNamePrefix STAR/{wildcards.sample}.STAR/ \
			--outSAMtype None \
			--quantMode TranscriptomeSAM \
			--limitBAMsortRAM 10000000000 \
			--outSAMunmapped Within \
			--outFilterMultimapNmax {config[STAR][outFilterMultimapNmax]} \
			--outFilterMultimapScoreRange {config[STAR][MULTIMAP_SCORE_RANGE]} \
			{config[STAR][FILTER_MISMATCH]}
	"""

rule STAR_transcr_se:
	input:
		config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz"
	output:
		"STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_3;
		mkdir -p `dirname {output}`;
		STAR \
			--genomeDir {STAR_GENOME_DIR} \
			--genomeLoad {config[STAR][SHARED_MEMORY]} \
			--runThreadN {config[CORES]} \
			--readFilesIn {input} \
			--readFilesCommand zcat \
			--outFileNamePrefix STAR/{wildcards.sample}.STAR/ \
			--outSAMtype None \
			--quantMode TranscriptomeSAM \
			--limitBAMsortRAM 10000000000 \
			--outSAMunmapped Within \
			--outFilterMultimapNmax {config[STAR][outFilterMultimapNmax]} \
			--outFilterMultimapScoreRange {config[STAR][MULTIMAP_SCORE_RANGE]} \
			{config[STAR][FILTER_MISMATCH]}
	"""

ruleorder: rsem_calculate_expression_pe > rsem_calculate_expression_se
rule rsem_calculate_expression_se:
	input:
		bam="STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
	output:
		isoforms="rsem/{sample}/rsem.isoforms.results",
		genes="rsem/{sample}/rsem.genes.results"
	params:
		rsem_index=GENCODE_DIR+"/RSEM/GRCh38.primary_assembly.star_index.rsem_ref",
		cores=20
	shell: 
		"mkdir -p `dirname {output.isoforms}`; "
		"mkdir -p rsem/{wildcards.sample}/stat; "
		"rsem-calculate-expression "
			"--bam --no-bam-output "
			"--estimate-rspd "
			"--num-threads {params.cores} "
			"STAR/{wildcards.sample}.STAR/Aligned.toTranscriptome.out.bam "
			"{params.rsem_index} "
			"rsem_{wildcards.sample}; "
		"mv rsem_{wildcards.sample}.isoforms.results {output.isoforms}; "
		"mv rsem_{wildcards.sample}.genes.results {output.genes}; "
		"mv rsem_{wildcards.sample}.stat rsem/{wildcards.sample}/stat"

rule rsem_calculate_expression_pe:
    input:
        bam="STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
    output:
        isoforms="rsem/{sample}/rsem.isoforms.results",
        genes="rsem/{sample}/rsem.genes.results"
    params:
        rsem_index=GENCODE_DIR + "/RSEM/GRCh38.primary_assembly.star_index.rsem_ref",
        cores=20
    shell:
        """
        mkdir -p $(dirname {output.isoforms});
		mkdir -p rsem/{wildcards.sample}/stat; 
        rsem-calculate-expression \
            --paired-end \
            --bam --no-bam-output \
            --estimate-rspd \
            --num-threads {params.cores} \
            {input.bam} \
            {params.rsem_index} \
            rsem_{wildcards.sample};
        mv rsem_{wildcards.sample}.isoforms.results {output.isoforms};
        mv rsem_{wildcards.sample}.genes.results {output.genes};
        mv rsem_{wildcards.sample}.stat rsem/{wildcards.sample}/stat
        """

rule multi_rsem:
	input:
		expand("rsem/{sample}/rsem.isoforms.results", sample=SAMPLES)
	output:
		"rsem.isoforms.results.gz"
	shell: 
		"matrix_reduce -t 'rsem/*/rsem.isoforms.results' | bawk 'NR==1 || $2!=transcript_id' | bawk 'NR==1{{$1=\"sample\"}}1'  | gzip > {output}"

rule rsem_gene_symbol:
	input:
		rsem="rsem.isoforms.results.gz",
		annot=GENCODE_DIR+"/basic.annotation.enst2gene_biotype2gene_name2transcript_biotype.map"
	output:
		"rsem.isoforms.results.gene_symbol.gz"
	shell:
		"zcat {input.rsem} | translate -a <(bawk 'BEGIN{{print \"transcript_id\",\"gene_type\",\"gene_symbol\",\"transcript_type\"}}{{print $2,$3,$4,$5}}' {input.annot}) 2 | gzip > {output}"

rule get_top_expressed_isoform_rsem:
    input:
        metadata="metadata.txt",
        rsem="rsem.isoforms.results.gene_symbol.gz"
    output:
        expressed="rsem.isoforms.results.gene_symbol.avg_condition.expressed.gz",
        top_iso="rsem.isoforms.results.gene_symbol.avg_condition.top_exp_isoform.gz"
    shell:
        "../../local/src/rsem_analysis.R {input.metadata} {input.rsem} {output.expressed} {output.top_iso}"

rule subset_gtf:
	input:
		transcr="{file}.txt", # one column file with transcript IDs
		gtf="/home/reference_data/bioinfotree/task/gencode/dataset/hsapiens/32/primary_assembly.annotation.gtf"
	output:
		"{file}.gtf"
	shell:
		"awk 'BEGIN{{while((getline<\"{input.transcr}\")>0)ids[$1]=1}} match($0, /transcript_id \"([^\"]+)\"/, m) && ids[m[1]] {{print}}' {input.gtf} > {output}"

rule gtf_index:
	input:
		"{file}.gtf"
	output: 
		gtf_srt="{file}.srt.gtf.gz",
		gtf_idx="{file}.srt.gtf.gz.tbi"
	shell:
		"sort -k1,1 -k4,4n {input} > {wildcards.file}.srt.gtf; "
		"bgzip {wildcards.file}.srt.gtf; "
		"tabix -p gff {wildcards.file}.srt.gtf.gz"



#################################
#
# IPAfinder 
# De novo identification and quantification of Intronic PolyAdenylation (IPA) events using standard RNA-seq data
#

rule detect_ipa:
	input:
		anno=EXTERNAL_REPO_DIR+"/IPAFinder/anno_files/IPAFinder_anno_hg38.txt",
		bamfile="{contrast}_allbamfiles.txt"
	output:
		"IPAFinder/{contrast}/IPAFinder_IPUI.txt"
	params:
		cores=20
	shell:
		"mkdir -p $(dirname {output}); "
		"python {EXTERNAL_REPO_DIR}/IPAFinder/IPAFinder_DetectIPA.py "
			"-b {input.bamfile} "
			"-anno {input.anno} "
			"-p {params.cores} "
			"-o {output}; "
		"mv project IPAFinder/{wildcards.contrast}"

rule infer_duipa:
	input:
		bamfile="{contrast}_allbamfiles.txt",
		ipa="IPAFinder/{contrast}/IPAFinder_IPUI.txt",
	output:
		"IPAFinder/{contrast}/IPAFinder_DUIPA.txt"
	shell:
		"Rscript {EXTERNAL_REPO_DIR}/IPAFinder/Infer_DUIPA.R "
			"-b {input.bamfile} "
			"-I {input.ipa} "
			"-d IPAFinder/{wildcards.contrast}/project "
			"-o {output}"	


#################
# 
# LABRAT
# Quantify the usage of alternative polyadenylation and cleavage sites in RNAseq data
#




###############################
#
# turbo-rMATS
#