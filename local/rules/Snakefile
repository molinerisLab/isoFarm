import os
import re

configfile: "config.yaml"

if os.path.exists("Snakefile_versioned.sk"):
    include: "Snakefile_versioned.sk"



#################
#
#  Global Params
#

REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT + "bioinfotree/task/"

CONDA_ACTIVATE="set +u; source %sminiconda2/etc/profile.d/conda.sh ; conda activate ; conda activate" % REFERENCE_ROOT

GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"gencode/dataset/"+config["GENCODE_SPECIES"]+"/"+config["GENCODE_VERSION"]
GENCODE_GENOME_FASTA=GENCODE_DIR+"/"+config["GENOME_ASSEMBLY"]+".primary_assembly.genome.fa"

STAR_GENOME_DIR=GENCODE_DIR+"/"+config["GENOME_ASSEMBLY"]+".primary_assembly.star_index/"+config["STAR_VERSION"]

FASTQ, = glob_wildcards(config["PATH_FASTQ"]+"/{fastq_x}.fastq.gz")
SAMPLES = [re.sub("_R\\d_001","",x) for x in FASTQ]

#try:
#	design = pd.read_table(config["PATH_DESIGN"])
#except BaseException as e:
#	print("[!] 'design' not defined!")
#	print('The exception: {}'.format(e))



###############
#
#  ALL targets
#

rule all:
	input:
		"multi_SalmonQuant.header_added.gz"



#################
#
#  Generic Rules
#

rule header_added_gz:
	input:
		"{file}.gz"
	output:
		"{file}.header_added.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_3; \
		(bawk -M {input} | cut -f 2 | transpose; zcat {input} ) | gzip > {output}
	"""



######################################
#
#  Isoform Quantification with SALMON	
#

ruleorder: salmon_pe > salmon_se

rule salmon_pe:
	input:
		fastq1=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		fastq2=config["PATH_FASTQ"]+"/{sample}_R2_001.fastq.gz",
		salmon_index=GENCODE_DIR+"/"+config["GENOME_ASSEMBLY"]+"_salmon_index"
	output:
		"Salmon/{sample}/quant.sf"
	shell:"""
		salmon quant \
			-i {input.salmon_index} \
			-l A \
			-1 {input.fastq1} -2 {input.fastq2} \
			-o `dirname {output}` \
			-p {config[CORES]}
	"""

rule salmon_se:
	input:
		fastq=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		salmon_index=GENCODE_DIR+"/"+config["GENOME_ASSEMBLY"]+"_salmon_index"
	output:
		"Salmon/{sample}/quant.sf"
	shell: """
		salmon quant \
			-i {input.salmon_index} \
			-l A \
			-r {input.fastq} \
			-o `dirname {output}` \
			-p {config[CORES]}
	"""

rule multi_SalmonQuant:
	input:
		expand("Salmon/{sample}/quant.sf", sample=SAMPLES)
	output:
		"multi_SalmonQuant.gz"
	shell: """
		matrix_reduce -t 'Salmon/*/quant.sf' | \
		grep -v 'EffectiveLength' | \
		tr "|" "\t" | cut -f1,2,3,6,7,9,11- | \
		gzip > {output}
	"""

"""
.META: multi_SalmonQuant.gz
	1	Sample
	2	Transcr_GencodeID
	3	Gene_GencodeID
	4	Transcr_EnsemblID
	5	Gene_name
	6	Biotype
	7	Lenght
	8	EffectiveLength
	9	TPM
	10	NumReads

"""

rule multi_SalmonQuant_matrix:
	input:
		"multi_SalmonQuant.gz"
	output:
		"multi_SalmonQuant.TPM_matrix.gz"
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_3; \
		bawk '{{print $Transcr_GencodeID, $Sample, $TPM}}' {input} | sed -e 's/_S[[:digit:]]\+//g' | tab2matrix -r Transcr_GencodeID | gzip > {output}
	"""

rule multi_SalmonQuant_RDS:
	input:
		"multi_SalmonQuant.TPM_matrix.gz"
	output:
		"multi_SalmonQuant.TPM_matrix.rds"
	shell: """
		{CONDA_ACTIVATE} rstudio_Rv4.0.3; export LD_LIBRARY_PATH=/sto1/ref/miniconda2/envs/rstudio_Rv4.0.3/jre/lib/amd64/server; \
		../../local/bin/rnaseqrtools-get_dgelist_obj \
			-c {input} \
			-m {config[PATH_METADATA]} \
			-n none -e 0 -s 0 -x FALSE; \
		mv dgelist_obj.rds {output}
	"""

rule get_enst:
	input:
		GENCODE_DIR+"/basic.annotation.enst2transcript_name2biotype.map"
	output:
		"{gene_name}.enst"
	shell: """
		grep {wildcards.gene_name} {input} | cut -f1 > {output}
	"""

rule plot_SalmonQuant_isoform:
	input:
		salmon_rds="multi_SalmonQuant.TPM_matrix.rds",
		selected_genes="{gene_name}.enst"
	output:
		"multi_SalmonQuant.TPM_matrix.{gene_name}.pdf"
	shell: """
	"""



###############################
#
#  RSEM Isoform Quantification
#

ruleorder: STAR_transcr_pe > STAR_transcr_se

rule STAR_transcr_pe:
	input:
		fastq1=config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz",
		fastq2=config["PATH_FASTQ"]+"/{sample}_R2_001.fastq.gz"
	output:
		"STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_3;
		mkdir -p `dirname {output}`;
		STAR \
			--genomeDir {STAR_GENOME_DIR} \
			--genomeLoad {config[STAR_SHARED_MEMORY]} \
			--runThreadN {config[CORES]} \
			--readFilesIn {input.fastq1} {input.fastq2} \
			--readFilesCommand zcat \
			--outFileNamePrefix STAR/{wildcards.sample}.STAR/ \
			--outSAMtype None \
			--quantMode TranscriptomeSAM \
			--limitBAMsortRAM 10000000000 \
			--outSAMunmapped Within \
			--outFilterMultimapNmax {config[STAR_outFilterMultimapNmax]} \
			--outFilterMultimapScoreRange {config[STAR_MULTIMAP_SCORE_RANGE]} \
			{config[STAR_FILTER_MISMATCH]}
	"""

rule STAR_transcr_se:
	input:
		config["PATH_FASTQ"]+"/{sample}_R1_001.fastq.gz"
	output:
		"STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam"
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_3;
		mkdir -p `dirname {output}`;
		STAR \
			--genomeDir {STAR_GENOME_DIR} \
			--genomeLoad {config[STAR_SHARED_MEMORY]} \
			--runThreadN {config[CORES]} \
			--readFilesIn {input} \
			--readFilesCommand zcat \
			--outFileNamePrefix STAR/{wildcards.sample}.STAR/ \
			--outSAMtype None \
			--quantMode TranscriptomeSAM \
			--limitBAMsortRAM 10000000000 \
			--outSAMunmapped Within \
			--outFilterMultimapNmax {config[STAR_outFilterMultimapNmax]} \
			--outFilterMultimapScoreRange {config[STAR_MULTIMAP_SCORE_RANGE]} \
			{config[STAR_FILTER_MISMATCH]}
	"""

rule RSEM_bam_se:
	input:
		bam="STAR/{sample}.STAR/Aligned.toTranscriptome.out.bam",
		rsem_ref=GENCODE_DIR+"/RSEM"
	output:
		"RSEM/{sample}/rsem.isoforms.results"
	shell: """
		rsem-calculate-expression \
			--alignments \
			--no-bam-output \
			-p {config[CORES]} \
			{input.bam} \
			{input.rsem_ref}/{config[GENOME_ASSEMBLY]}.primary_assembly.star_index.rsem_ref \
			RSEM/{wildcards.sample}/rsem
	"""

rule multi_RSEM:
	input:
		expand("RSEM/{sample}/rsem.isoforms.results", sample=SAMPLES)
	output:
		"multi_RSEM.gz"
	shell: """
		matrix_reduce -t 'RSEM/*/rsem.isoforms.results' | grep -v transcript_id | gzip > {output} 
	"""

