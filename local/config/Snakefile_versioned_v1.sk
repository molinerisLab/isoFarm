#################
#
#  Global Params
#

REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT + "/bioinfotree/task"

GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"/gencode/dataset/"+config["SPECIES"]+"/"+config["GENCODE"]["VERSION"]
GENCODE_GENOME_FASTA=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.genome.fa"

STAR_GENOME_DIR=GENCODE_DIR+"/"+config["GENCODE"]["ASSEMBLY"]+".primary_assembly.star_index/"+config["STAR"]["VERSION"]

PATH_DEXSEQ="/sto1/ref/miniconda2/envs/isoFarm_Env/lib/R/library/DEXSeq/python_scripts"

FASTQ, = glob_wildcards(config["PATH_FASTQ"]+"/{fastq_x}.fastq.gz")
SAMPLES = [re.sub("_R\\d_001","",x) for x in FASTQ]




############
#
#  DEXSeq
#

STRANDED=1
# 1 -> forward
# 2 -> reverse
# 0 -> unstranded

rule gff_exp_filter:
	input:
		gep_count="../../../GEP.count.exp_filter.gz",
		ensg2gene_symbol=GENCODE_DIR+"/basic.annotation.ensg2gene_symbol2biotype.map"
	output:
		"exp_filter.txt"
	shell: """
		zcat {iinput.gep_count} | cut -f1 | unhead | translate -a -f 2 -d -j {input.ensg2gene_symbol} 1 > {output}
	"""

rule filter_gff:
	input:
		gff=GENCODE_DIR+"/basic.annotation.gff",
		exp_filter="exp_filter.txt"
	output:
		"basic.annotation.exons.exp_filter.gff"
	shell: """
		bawk '{{split($9,a,"\\""); print $0,a[2]}}' {input.gff} | filter_1col 10 <(cut -f2 {input.exp_filter}) | cut -f-9 > {output}
	"""


#ruleorder: dexseq_count_pe > dexseq_count_se

rule dexseq_count_se:
	input:
		dexseq_ref="exon_annotation.exp_filter.gff",
		bam=config["PATH_BAM"]+"/{sample}.STAR/Aligned.sortedByCoord.out.bam"
	output:
		"DEXSeq/{sample}.count"
	shell: """
		mkdir -p `dirname {output}`; \
		python {PATH_DEXSEQ}/dexseq_count.py \
			-r pos \
			-a 5 \
			-f bam \
			-s {STRANDED} \
			{input.dexseq_ref} {input.bam} {output}
	"""

#rule dexseq_count_pe:
#	input:
#		dexseq_ref="exon_annotation.exp_filter.gff",
#		bam=config["PATH_BAM"]+"/{sample}.STAR/Aligned.sortedByCoord.out.bam"
#	output:
#		"DEXSeq/{sample}.count"
#	shell: """
#		python {PATH_DEXSEQ}/dexseq_count.py \
#			{input.dexseq_ref} \
#			-p yes
#			-r pos \
#			-f bam \
#			-s {STRANDED} \
#			{input.bam} {output}
#	"""


rule dexseq_clean:
	input:
		"DEXSeq/{sample}.count"
	output:
		"DEXSeq/{sample}.count.clean"
	shell: """
		grep -v '^_' {input} | tr -d "\\"" > {output}
	"""


rule dexseq_test_DEU:
	input:
		expand("DEXSeq/{sample}.count.clean", sample=SAMPLES)
	output:
		"dxd.rds"
	shell: """
		Rscript runDEXseq.R
	"""
 